name: Build AWS Infrastructure and Deploy Dockerized Flask-App on it.

on:
  # push:
  #   paths:
  #     - 'Terraform/**'
  #   branches: [ "main" ]

  workflow_dispatch: # Allow to run this workflow manually from the Actions tab
    inputs:
      trigger:
        description: "apply OR destroy" # apply to build infra, destroy to destroy it all.
        required: true
        default: apply # will choose the word apply for you when triggering the pipeline manually.
        type: choice
        options:
        - apply
        - destroy

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS User Credentials.
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS User Credentials.
  EC2_PRIVATE_SSH_KEY: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }} # Used to ssh into EC2.
  EC2_PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_PUBLIC_KEY }} # Used to upload public key to aws.
  TF_VAR_ami: ${{ secrets.TF_VAR_AMI }}  # trying different way to reference variables. we will use it in two jobs.
  AWS_REGION: us-east-1 # just to be used in ECR but every thing else in eu-south-1
  #TRIGGER: 'apply' # Make it 'apply' to build AWS infra, and 'destroy' to destroy it all. "auto_workflow (on Push)"
  TRIGGER: '${{ inputs.trigger }}' # "manual workflow"

jobs:
  build-aws-infra:
    runs-on: ubuntu-latest
    
    outputs: # used to reference in Second job
      EC2_PRIVATE_IP: ${{ steps.get-private-ip.outputs.ec2_private_ip}} 
      BASTION_PUBLIC_IP: ${{ steps.get-public-ip.outputs.bastion_public_ip}}
       
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    # Unnecessary step, because terraform is already installed on GitHub runner    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
 
    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./Terraform
    
    # Checks that all Terraform configuration files in the correct format
    - name: Terraform Format
      run: |-
        terraform fmt -recursive
        terraform fmt -check
      working-directory: ./Terraform

    - name: Skip All When Destroy
      if: env.TRIGGER == 'destroy'
      run: exit 1

    - name: Terraform ${{ env.TRIGGER }}
      id: apply-or-destroy # id only can have static name not changing name.
      run: |-
        terraform $TRIGGER \
        -var="public_key=$EC2_PUBLIC_SSH_KEY" \
        -auto-approve
      working-directory: ./Terraform

    - name: Set Output 1
      if: env.TRIGGER == 'apply'
      id: get-private-ip
      run: echo "ec2_private_ip=$(terraform output application_private_ip_1)" >> $GITHUB_OUTPUT 
      working-directory: ./Terraform
   
    - name: Set Output 2
      if: env.TRIGGER == 'apply'
      id: get-public-ip
      run: echo "bastion_public_ip=$(terraform output bastion_public_ip)" >> $GITHUB_OUTPUT 
      working-directory: ./Terraform
      # echo "{name}={value}" >> $GITHUB_OUTPUT # new way of outputs


  # Second Job
  configure-aws-infra:
    runs-on: ubuntu-latest
    needs: build-aws-infra
    steps:

    # This step is to be able to run "destroy bastion" step
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set Private IP to Env Variables
      if: env.TRIGGER == 'apply'
      run: echo EC2_PRIVATE_IP=${{ needs.build-aws-infra.outputs.EC2_PRIVATE_IP }} >> $GITHUB_ENV

    - name: Set Public IP to Env Variables
      if: env.TRIGGER == 'apply'
      run: echo BASTION_PUBLIC_IP=${{ needs.build-aws-infra.outputs.BASTION_PUBLIC_IP }} >> $GITHUB_ENV
          
    - name: Login to AWS ECR Public
      if: env.TRIGGER == 'apply'
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1    
      with:
        registry-type: public
    
    - name: Build and Push Docker Image
      if: env.TRIGGER == 'apply'
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: g4x4w1s3
        REPOSITORY: Monty-Hall-Game
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
      working-directory: ./Monty_Hall_Game_Flask_App
    
    
    
    
    
    
    
    
    
    
    - name: ssh into private EC2
      if: env.TRIGGER == 'apply'
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ env.EC2_PRIVATE_IP }}
        username: ec2-user
        key: ${{ env.EC2_PRIVATE_SSH_KEY }}
        proxy_host: ${{ env.BASTION_PUBLIC_IP }}
        proxy_username: ec2-user
        proxy_key: ${{ env.EC2_PRIVATE_SSH_KEY }}
        script: |
          ls -al
          mkdir my_app
          cd ./my_app
          touch new_file.txt
          ls -al
# instead of running script, run Ansible playbook.          
    
    
    #TRY to remove this step

    # - name: Terraform Init
    #   id: init
    #   run: terraform init
    #   working-directory: ./Terraform
    # Optional step to lower some cost after operation.
    - name: Terraform Destroy Bastion Host
      if: env.TRIGGER == 'apply' # when TRIGGER = 'yes' don't run this because it's already destroyed.
      id: destroy-bastion-host
      run: |
        terraform destroy -target="aws_instance.bastion_instance_1" \
        -var="public_key=$EC2_PUBLIC_SSH_KEY" \
        -auto-approve
            
      working-directory: ./Terraform