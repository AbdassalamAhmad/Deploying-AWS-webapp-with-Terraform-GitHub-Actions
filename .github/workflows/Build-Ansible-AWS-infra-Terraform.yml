name: Using Ansible, Build AWS Infrastructure and Deploy Dockerized Flask-App on it.

on:
  # push:
  #   paths:
  #     - 'Terraform/**'
  #   branches: [ "main" ]

  workflow_dispatch: # Allow to run this workflow manually from the Actions tab
    inputs:
      trigger:
        description: "apply OR destroy" # apply to build infra, destroy to destroy it all.
        required: true
        default: apply # will choose the word apply for you when triggering the pipeline manually.
        type: choice
        options:
        - apply
        - destroy

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS User Credentials.
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS User Credentials.
  EC2_PRIVATE_SSH_KEY: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }} # Used to ssh into EC2.
  EC2_PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_PUBLIC_KEY }} # Used to upload public key to aws.
  TF_VAR_ami: ${{ secrets.TF_VAR_AMI }}  # trying different way to reference variables. we will use it in two jobs.
  AWS_REGION: us-east-1 # just to be used in ECR but every thing else in eu-south-1
  #TRIGGER: 'apply' # Make it 'apply' to build AWS infra, and 'destroy' to destroy it all. "auto_workflow (on Push)"
  TRIGGER: '${{ inputs.trigger }}' # "manual workflow"

jobs:
  build-aws-infra:
    runs-on: ubuntu-latest
    
    outputs: # used to reference in Second job
      EC2_PRIVATE_IP: ${{ steps.get-private-ip.outputs.ec2_private_ip}} 
      BASTION_PUBLIC_IP: ${{ steps.get-public-ip.outputs.bastion_public_ip}}
       
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    # Unnecessary step, because terraform is already installed on GitHub runner    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
 
    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./Terraform
    
    # Checks that all Terraform configuration files in the correct format
    - name: Terraform Format
      run: |-
        terraform fmt -recursive
        terraform fmt -check
      working-directory: ./Terraform

    - name: Terraform ${{ env.TRIGGER }}
      id: apply-or-destroy # id only can have static name not changing name.
      run: |-
        terraform $TRIGGER \
        -var="public_key=$EC2_PUBLIC_SSH_KEY" \
        -var="key_name=ssh_key_aws" \
        -auto-approve
      working-directory: ./Terraform

    - name: Set Output 1
      if: env.TRIGGER == 'apply'
      id: get-private-ip
      run: echo "ec2_private_ip=$(terraform output application_private_ip_1)" >> $GITHUB_OUTPUT 
      working-directory: ./Terraform
   
    - name: Set Output 2
      if: env.TRIGGER == 'apply'
      id: get-public-ip
      run: echo "bastion_public_ip=$(terraform output bastion_public_ip)" >> $GITHUB_OUTPUT 
      working-directory: ./Terraform
      # echo "{name}={value}" >> $GITHUB_OUTPUT # new way of outputs


  # Second Job
  configure-aws-infra:
    runs-on: ubuntu-latest
    needs: build-aws-infra
    steps:

    # This step is to be able to run "destroy bastion" step
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set Private IP to Env Variables
      if: env.TRIGGER == 'apply'
      run: echo EC2_PRIVATE_IP=${{ needs.build-aws-infra.outputs.EC2_PRIVATE_IP }} >> $GITHUB_ENV

    - name: Set Public IP to Env Variables
      if: env.TRIGGER == 'apply'
      run: echo BASTION_PUBLIC_IP=${{ needs.build-aws-infra.outputs.BASTION_PUBLIC_IP }} >> $GITHUB_ENV
          
    - name: Login to AWS ECR Public
      if: env.TRIGGER == 'apply'
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1    
      with:
        registry-type: public
    
    - name: Build and Push Docker Image
      if: env.TRIGGER == 'apply'
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: g4x4w1s3
        REPOSITORY: monty-hall-game
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
      working-directory: ./Monty_Hall_Game_Flask_App
    
    - name: Install Ansible
      if: env.TRIGGER == 'apply'
      run: |
        sudo apt update
        sudo apt install software-properties-common
        sudo add-apt-repository --yes --update ppa:ansible/ansible
        sudo apt -y install ansible

    - name: Run Ansible Playbook on Private EC2 Instance.
      if: env.TRIGGER == 'apply'
      run: |
        echo "$EC2_PRIVATE_SSH_KEY" > ssh_key_aws.pem
        sudo chmod 400 ssh_key_aws.pem
        ansible-playbook docker_playbook.yml --extra-vars "ansible_host=$EC2_PRIVATE_IP" 
      working-directory: ./Ansible
    
    
# Note: run this command when applying for the second time.      
# sudo docker ps -aq | sudo xargs docker stop | sudo xargs docker rm &&
    
    - name: Terraform Init
      if: env.TRIGGER == 'apply'
      id: init
      run: terraform init
      working-directory: ./Terraform
      
    # Optional step to lower some cost after operation.
    - name: Terraform Destroy Bastion Host
      if: env.TRIGGER == 'apply' # when TRIGGER = 'destroy' don't run this because it's already destroyed.
      id: destroy-bastion-host
      run: |
        terraform destroy -target="aws_instance.bastion_instance_1" \
        -var="public_key=$EC2_PUBLIC_SSH_KEY" \
        -var="key_name=ssh_key_aws" \
        -auto-approve        
      working-directory: ./Terraform